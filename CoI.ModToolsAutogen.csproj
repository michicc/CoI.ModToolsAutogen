<Project Sdk="Microsoft.NET.Sdk">
  <Import Project="Options.user" Condition="Exists('Options.user')" />

  <PropertyGroup>
    <OutputType>Library</OutputType>
    <TargetFramework>net48</TargetFramework>
    <Configurations>Debug;Release</Configurations>
    <Nullable>enable</Nullable>
    <LangVersion>latest</LangVersion>
    <EnableDefaultItems>false</EnableDefaultItems>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <AccelerateBuildsInVisualStudio>false</AccelerateBuildsInVisualStudio>
    <Version>2.0.0</Version>
  </PropertyGroup>

  <ItemGroup>
    <None Include="Options.user" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="Source\**\*" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="AssetBundles\**" Exclude="AssetBundles\**\*.manifest;AssetBundles\AssetBundles;**\.gitignore" CopyToOutputDirectory="PreserveNewest" />
    <Content Include="AssetBundles\mafi_bundles.manifest" CopyToOutputDirectory="PreserveNewest" Condition="Exists('AssetBundles\mafi_bundles.manifest')" />
  </ItemGroup>

  <ItemGroup>
    <GameAssembly Include="Mafi" />
    <GameAssembly Include="Mafi.Core" />
    <GameAssembly Include="Mafi.Base" />
    <GameAssembly Include="Mafi.Unity" />
    <GameAssembly Include="UnityEngine.CoreModule" />
    <GameAssembly Include="UnityEngine.AnimationModule" />
  </ItemGroup>

  <!-- Scaffolding for referencing game data/DLLs. -->
  <PropertyGroup>
    <!-- Locate game DLL directory. -->
    <GameDir Condition="'$(GameDir)' == ''">$(COI_ROOT)</GameDir>
    <GameManagedDir Condition="'$(GameManagedDir)' == ''">$(GameDir)\Captain of Industry_Data\Managed</GameManagedDir>
    <ModFolderName Condition="'$(ModFolderName)' == ''">$(AssemblyName)</ModFolderName>
    <GameModDir Condition="'$(GameModDir)' == ''">$(AppData)\Captain of Industry\Mods\$(AssemblyName)\</GameModDir>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="@(GameAssembly)">
      <HintPath Condition="Exists('$(GameManagedDir)\%(Identity).dll')">$(GameManagedDir)\%(Identity).dll</HintPath>
      <Private>false</Private>
    </Reference>
  </ItemGroup>

  <!-- Create nice error message if a valid install dir was not provided. -->
  <Target Name="CheckGameDir" BeforeTargets="BeforeBuild">
    <PropertyGroup>
      <_InvalidGameDir Condition="!Exists('$(GameManagedDir)')">true</_InvalidGameDir>
    </PropertyGroup>
    <Error Text="No valid Captain of Industry installation directory set. Modify Paths.user or set COI_ROOT environment variable properly." ContinueOnError="false" Condition="'$(_InvalidGameDir)' == 'true'" />
  </Target>

  <!-- Collect all output files relative to the OutputPath. -->
  <Target Name="CollectCopyToModDir" AfterTargets="AfterBuild">
    <ItemGroup>
      <_CopyToModDirFiles Include="$(OutputPath)\**\*" />
      <_CopyToModDirFilesDest Include="@(_CopyToModDirFiles-&gt;Replace('$(OutputPath)', '$(GameModDir)'))" />
    </ItemGroup>
  </Target>

  <!-- Copy mod output to game dir if requested. -->
  <Target Name="CopyToModDir" Inputs="@(_CopyToModDirFiles)" Outputs="@(_CopyToModDirFilesDest)" AfterTargets="AfterBuild" DependsOnTargets="CollectCopyToModDir" Condition="'$(Configuration)' == 'Debug' And '$(CopyToModDirectory)' == 'true'">
    <Message Text="Copying mod to game dir -&gt; $(GameModDir)" Importance="high" />

    <Copy SourceFiles="@(_CopyToModDirFiles)" DestinationFiles="@(_CopyToModDirFilesDest)" SkipUnchangedFiles="true" />
  </Target>

  <!-- Delete mod files from game dir on Clean. -->
  <Target Name="CustomClean" BeforeTargets="CoreClean" Condition="'$(Configuration)' == 'Debug' And '$(CopyToModDirectory)' == 'true'">
    <Message Text="Cleaning mod from game dir" Importance="high" />

    <ItemGroup>
      <_CustomFilesToDelete Include="$(GameModDir)**\*" />
    </ItemGroup>
    <Delete Files="@(_CustomFilesToDelete)" />
  </Target>

  <!-- Collect all output files relative to the OutputPath. -->
  <Target Name="CollectZipContents" AfterTargets="AfterBuild">
    <PropertyGroup>
      <ModPublishPath Condition="'$(ModPublishPath)' == ''">$(MSBuildProjectDirectory)\$(BaseOutputPath)</ModPublishPath>
      <_ZipName>$(ModPublishPath)$(ModFolderName)_$(Version).zip</_ZipName>
      <_ZipStagingDir>$(ModPublishPath)Stage\</_ZipStagingDir>
      <_ZipModDir>$(_ZipStagingDir)$(ModFolderName)\</_ZipModDir>
    </PropertyGroup>

    <ItemGroup>
      <_CopyToPublishDirFiles Include="$(OutputPath)\**\*" />
      <_CopyToPublishDirFilesDest Include="@(_CopyToPublishDirFiles-&gt;Replace('$(OutputPath)', '$(_ZipModDir)'))" />
    </ItemGroup>
  </Target>

  <!-- Package the mod into a neat zip -->
  <Target Name="PrepareForPublishing" Inputs="@(_CopyToPublishDirFiles)" Outputs="$(_ZipName)" AfterTargets="AfterBuild" DependsOnTargets="CollectZipContents" Condition="'$(Configuration)' == 'Release' AND '$(BuildZipOnRelease)' == 'true'">
    <Message Text="Publishing mod to -&gt; $(_ZipName)" Importance="high" />

    <!-- Assure the output path exists -->
    <MakeDir Directories="$(_ZipModDir)" />

    <Copy SourceFiles="@(_CopyToPublishDirFiles)" DestinationFiles="@(_CopyToPublishDirFilesDest)" SkipUnchangedFiles="true" />
    <ZipDirectory SourceDirectory="$(_ZipStagingDir)" DestinationFile="$(_ZipName)" Overwrite="true" />

    <!-- Clean up -->
    <RemoveDir Directories="$(_ZipStagingDir)" />
  </Target>

  <!-- Delete zip files from publish dir on Clean. -->
  <Target Name="CustomCleanZip" BeforeTargets="CoreClean" Condition="'$(Configuration)' == 'Release' And '$(BuildZipOnRelease)' == 'true'">
    <PropertyGroup>
      <ModPublishPath Condition="'$(ModPublishPath)' == ''">$(MSBuildProjectDirectory)\$(BaseOutputPath)</ModPublishPath>
    </PropertyGroup>

    <Message Text="Cleaning published zips" Importance="high" />

    <ItemGroup>
      <_OldZips Include="$(ModPublishPath)\$(ModFolderName)_*.zip" />
    </ItemGroup>
    <Delete Files="@(_OldZips)" />
  </Target>
</Project>
